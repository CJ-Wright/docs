.. _architecture:

Event-Based Architecture
************************

We have implemented a next-generation event-based data collection and analysis
toolchain.  The event-based data model supports complex, asynchronous data
collection and enables sophisticated live, prompt, streaming, and
*post-facto* data analysis.

All of the software can be understood as tools to generate, move, and process
these documents. The documents themselves are mappings. We commonly represent
them in JSON, as mongoDB documents, or as Python dictionaries. Each document
class has a defined, but flexible, schema.

The model is comprised of four types of Documents.

Each “run” generates

* one Start Document
* one Stop Document
* one or more sequences of Event Documents
* one Descriptor Document per sequence of Event Documents.

The scope of a “run” is left to the beamline or individual scientist. It is
quite generic: a set of Documents generated by following a given sequence of
instructions. This might encompass a single short measurement (say, a “a
count”) or a multi-step procedure such as a raster scan. A run should represent
a set of individual measurements that will be collected or processed together.

* Start: At the beginning of a run, a Document is generated with open-ended
  metadata (user name, sample information) and in general any information that
  is known from the start.
* Event: Each event is a single “data point,” which may contain several
  readings taken “at the same time” -- the meaning of which depends on the
  scientific context.
* Descriptor: Each sequence of Events has an Event Descriptor with information
  about what data is in the Events, such as the names, types, shapes and hardware
  sources of each of the measurements. The Descriptor documents can also contain
  configuration details about the hardware, such as exposure time.
* Stop: At the end of a run, a Document is generated with information that is
  only known at the end -- such as whether the run terminated due to some 
  failure.

The precise schemas for these documents are provided as jsonschema documents
in `this repository <https://github.com/NSLS-II/event-model#event-model>`_.
